clearvars;
clc;
SNRdB = 0:0.5:8;
%SNRdB =5;
SNRlin = 10.^(SNRdB./10);
rate = 0.5;
sigmasq = 1./((2*rate).*SNRlin);
sigmaset = sqrt(sigmasq);
Nsim = 2000;
A = input('Enter the length of Input Sequence: ');
i =0;
Nerr_BSC =zeros(1,length(SNRdB));
Nerr_BEC =zeros(1,length(SNRdB));
Nerr_AWGN =zeros(1,length(SNRdB));
Decoded_BSC = zeros(1,A+2);
Decoded_BEC = zeros(1,A+2);
Decoded_AWGN = zeros(1,A+2);

% A = length of Input 
for sigma = sigmaset
    i=i+1;
    p = qfunc(sqrt(2*rate*SNRlin(i)));
    for ksim =1:Nsim
        %Signal generation
        Signal = signal_generator(A);
        %Encoding Starts
        [Trans,Trans_AWGN] = encoder(Signal);
        %Channel starts  
        [Rcvd_BSC, Rcvd_BEC, Rcvd_AWGN] = noise_insertion(Trans,Trans_AWGN,p,sigma);
        % Decoding at receiver begins
          Decoded_BSC = viterbidec(Rcvd_BSC);
          Decoded_BEC = viterbidec(Rcvd_BEC);
          Decoded_AWGN = viterbidec_AWGN(Rcvd_AWGN);     
        % Decoding at receiver ends
        % Calculation of Errors
        Nerr_BSC(i) = Nerr_BSC(i) + hamming_dist(Decoded_BSC,Signal);
        Nerr_BEC(i) = Nerr_BEC(i) + hamming_dist(Decoded_BEC,Signal);
        Nerr_AWGN(i) = Nerr_AWGN(i) + hamming_dist(Decoded_AWGN,Signal);
    end    
end
% Calculation of BER for each channel
    BER_BSC = Nerr_BSC./(Nsim*A);
    BER_BEC = Nerr_BEC./(Nsim*A);
    BER_AWGN = Nerr_AWGN./(Nsim*A);

%% Plotting the Graph
semilogy(SNRdB,BER_BSC,'o-','linewidth',2,'markerfacecolor','b','markeredgecolor','b');
hold on;
semilogy(SNRdB,BER_AWGN/2,'^-','linewidth',2,'color',[0 0.5 0],'markerfacecolor',[0 0.5 0],'markeredgecolor',[0 0.5 0]);
hold on;
semilogy(SNRdB,BER_BEC,'d-','linewidth',2,'color',[0 0.4 0.9],'markerfacecolor',[0 0.4 0.9],'markeredgecolor',[0 0.4 0.9]);
xlabel('SNR per Bit in dB'); ylabel('Probability of Bit Error'); 
grid on;
legend('BSC','Gaussian Noise','BEC'); axis([0 8 1e-7 1]); set(gca,'xtick',0:0.5:8);

function [Signal] = signal_generator(A)
    for j=1:A
            Signal(j) = randi(2,1)-1;
    end
        Signal(j+1) = 0;
        Signal(j+2) = 0;
end

function [Trans, Trans_AWGN] = encoder(Signal) 
        state = '00';
        len_sig = length(Signal);
        for j=1:len_sig
            if strcmp(state,'00')
                [Trans(2*(j-1)+2),Trans(2*(j-1)+1),state] = State_fun_00(Signal(j));

             else if strcmp(state,'10')
                [Trans(2*(j-1)+2),Trans(2*(j-1)+1),state] = State_fun_10(Signal(j));

                 else if strcmp(state,'11')
                        [Trans(2*(j-1)+2),Trans(2*(j-1)+1),state] = State_fun_11(Signal(j));

                        else if strcmp(state,'01')
                                [Trans(2*(j-1)+2),Trans(2*(j-1)+1),state] = State_fun_01(Signal(j));
                             end
                       end
                  end
            end
        end
        n = length(Trans);
        for j=1:n
            if Trans(j) == 1
                Trans_AWGN(j) = 1;
            else
                Trans_AWGN(j) = -1;
            end
        end
end

function[p0, p1, state] = State_fun_00(x)
    if x==0
        p0 = 0;
        p1 = 0;
        state = '00';
    else
        p0 = 1;
        p1 = 1;
        state = '10';
    end
end

function[p0, p1, state] = State_fun_01(x)
    if x==0
        p0 = 1;
        p1 = 1;
        state = '00';
    else
        p0 = 0;
        p1 = 0;
        state = '10';
    end
end

function[p0, p1, state] = State_fun_10(x)
    if x==0
        p0 = 1;
        p1 = 0;
        state = '01';
    else
        p0 = 0;
        p1 = 1;
        state = '11';
    end
end

function[p0, p1, state] = State_fun_11(x)
    if x==0
        p0 = 0;
        p1 = 1;
        state = '01';
    else
        p0 = 1;
        p1 = 0;
        state = '11';
    end
end

function[Rcvd_BSC, Rcvd_BEC, Rcvd_AWGN] = noise_insertion(Trans,Trans_AWGN,p,sigma)
    for j=1:length(Trans)
            % BSC Channel
           noise = rand(1); 
           if noise < p
               Rcvd_BSC(j) = bitflip(Trans(j));
           else
               Rcvd_BSC(j) = Trans(j);
           end
           % BEC Channel
           noise = rand(1);
           if noise < p
               Rcvd_BEC(j) =0;
               %In BEC we assume all the erased bits the same, 0 or 1 whichever has
               %higher probablity. Here since both are the same we can choose any. In
               %this program we choose it to be 0.
           else
               Rcvd_BEC(j) = Trans(j);
           end
           % AWGN Channel
           noise = randn *sigma;
           Rcvd_AWGN(j) = Trans_AWGN(j) + noise;
%            if Rcvd_AWGN(j) <= 0
%                Rcvd_AWGN(j) =0;
%            else
%                Rcvd_AWGN(j) =1;
%            end
        end 
end

function[y] = viterbidec(Rcvd)
%{
    Allias of state used in code
    State 00 - 1
    State 10 - 2
    State 11 - 3
    State 01 - 4
%}


global Signal;                 
Signal = Rcvd;

global previous_states;
len = length(Signal);
                                 
previous_states = zeros(4,len/2+1);% This helps in kepping record of the previous state for each current state
global branch_metric;
branch_metric = 5*ones(4,4,len/2);

global path_metric
path_metric = zeros(4,len/2+1);

for time = 1:len/2
    for state1 = 1:4
        for state2 = 1:4
            branch_metric(state1,state2,time) = branch_metric_calculator(state1,state2,time);
        end
    end
end

for time = 1:len/2+1
    for state = 1:4
        path_metric(state,time) = path_metric_calculator(state,time);
    end
end



%Trellis diagram formation
%

trellis = zeros(4, len/2 + 1);
trellis(1,1) = 0;
trellis(2:4,1) = inf;
for i = 2:1:len/2+1
    for j = 1:4        
        trellis(j,i) = path_metric(j,i);            
    end
end

%
%End of trellis diagram formation

%Trellis traceback
%
% min_PM = min(trellis(1:4, len/2+1));
min_PM = trellis(1,len/2+1);
minPM_state = 1;
l = len/2;
for j = 1:4
    if trellis(j,i) ~= min_PM
        trellis(j,i) = inf;
    else
        minPM_state = j;
    end
end
for i = len/2+1:-1:1
    if l == 0
        break;
    end
    
        
    switch minPM_state
        case 1
            if previous_states(1,i) == 1
                op(l) = 0;
            else
                op(l) = 0;
            end
        case 2
            if previous_states(2,i) == 1
                op(l) = 1;
            else
                op(l) = 1;
            end
        case 3
            if previous_states(3,i) == 2
                op(l) = 1;
            else
                op(l) = 1;
            end
        case 4
            if previous_states(4,i) == 2
                op(l) = 0;
            else
                op(l) = 0;
            end            
    end
    
    min_PM = min(trellis(1:4, l));
    for j = 1:4
        if trellis(j,l) ~= min_PM
            trellis(j,l) = inf;
        else
            minPM_state = j;
        end
    end
    l = l - 1;
end
%
%Trellis traceback finished

y = op;
%Branch metric function defined

function [branch_metric] = branch_metric_calculator(state1, state2, time)
%     global Signal;
    switch state1
       
        case 1
            if state2 == 1
                branch_metric = hamming_dist([Signal(2*time-1),Signal(2*time)],[0,0]);
            else  
                branch_metric = hamming_dist([Signal(2*time-1),Signal(2*time)],[1,1]);
            end
            
        case 2
            if state2 == 3
                branch_metric = hamming_dist([Signal(2*time-1),Signal(2*time)],[1,0]);
            else
                branch_metric = hamming_dist([Signal(2*time-1),Signal(2*time)],[0,1]);
            end
            
        case 3
            if state2 == 3
                branch_metric = hamming_dist([Signal(2*time-1),Signal(2*time)],[0,1]);
            else
                branch_metric = hamming_dist([Signal(2*time-1),Signal(2*time)],[1,0]);
            end
            
        case 4
            if state2 == 1
                branch_metric = hamming_dist([Signal(2*time-1),Signal(2*time)],[1,1]);
            else
                branch_metric = hamming_dist([Signal(2*time-1),Signal(2*time)],[0,0]);
            end
    end
end

%Path metric function defined
%
function [y] = path_metric_calculator(state, time)
%     global previous_states
%     global path_metric;
%     global branch_metric;
    if time == 1
        if state == 1
            y = 0;
        else
            y = inf;
        end
              
    
    else
        
        if state == 1 || state == 2
            y = min(path_metric(1,time-1) + branch_metric(1,state,time-1), path_metric(4,time-1) + branch_metric(4,state,time-1));
            if y == path_metric(1,time-1) + branch_metric(1,state,time-1)
                previous_states(state,time) = 1;
            else
                previous_states(state,time) = 4;
            end
        else
            y = min(path_metric(3,time-1) + branch_metric(3,state,time-1), path_metric(2,time-1) + branch_metric(2,state,time-1));
            if y == path_metric(3,time-1) + branch_metric(3,state,time-1)
                previous_states(state,time) = 3;
            else
                previous_states(state,time) = 2;
            end
        end
        
    
     end
end

end


function[y] = viterbidec_AWGN(vector)
%{
    Allias of state used in code
    State 00 - 1
    State 10 - 2
    State 11 - 3
    State 01 - 4
%}


global Signal;                 %This is the input to be decoded
Signal = vector;

global pred_state;
len = length(Signal);
                                   %To keep  record of arc
pred_state = zeros(4,len/2+1);
global BM;
BM = zeros(4,4,len/2);

global PM
PM = zeros(4,len/2+1);

for time = 1:len/2
    for s1 = 1:4
        for s2 = 1:4
            BM(s1,s2,time) = BrM(s1,s2,time);
        end
    end
end

for time = 1:len/2+1
    for s = 1:4
        PM(s,time) = PaM(s,time);
    end
end



%Trellis diagram formation
%

trellis_diagram = zeros(4, len/2 + 1);
trellis_diagram(1,1) = 0;
trellis_diagram(2:4,1) = inf;
for i = 2:1:len/2+1
    for j = 1:4        
        trellis_diagram(j,i) = PM(j,i);            
    end
end

%
%End of trellis diagram formation

%Trellis traceback
%
min_PM = min(trellis_diagram(1:4, len/2+1));
minPM_state = 1;
l = len/2;
for j = 1:4
    if trellis_diagram(j,i) ~= min_PM
        trellis_diagram(j,i) = inf;
    else
        minPM_state = j;
    end
end
for i = len/2+1:-1:1
    if l == 0
        break;
    end
    
        
    switch minPM_state
        case 1
            if pred_state(1,i) == 1
                op(l) = 0;
            else
                op(l) = 0;
            end
        case 2
            if pred_state(2,i) == 1
                op(l) = 1;
            else
                op(l) = 1;
            end
        case 3
            if pred_state(3,i) == 2
                op(l) = 1;
            else
                op(l) = 1;
            end
        case 4
            if pred_state(4,i) == 2
                op(l) = 0;
            else
                op(l) = 0;
            end            
    end
    
    min_PM = min(trellis_diagram(1:4, l));
    for j = 1:4
        if trellis_diagram(j,l) ~= min_PM
            trellis_diagram(j,l) = inf;
        else
            minPM_state = j;
        end
    end
    l = l - 1;
end
%
%Trellis traceback finished

y = op;
%Branch metric function defined

function [branch_metric] = BrM(state1, state2, time)
%     global Signal;
    switch state1
       
        case 1
            if state2 == 1
                branch_metric = euclidian_dist([Signal(2*time-1),Signal(2*time)],[-1,-1]);
            else  
                branch_metric = euclidian_dist([Signal(2*time-1),Signal(2*time)],[1,1]);
            end
            
        case 2
            if state2 == 3
                branch_metric = euclidian_dist([Signal(2*time-1),Signal(2*time)],[1,-1]);
            else
                branch_metric = euclidian_dist([Signal(2*time-1),Signal(2*time)],[-1,1]);
            end
            
        case 3
            if state2 == 3
                branch_metric = euclidian_dist([Signal(2*time-1),Signal(2*time)],[-1,1]);
            else
                branch_metric = euclidian_dist([Signal(2*time-1),Signal(2*time)],[1,-1]);
            end
            
        case 4
            if state2 == 1
                branch_metric = euclidian_dist([Signal(2*time-1),Signal(2*time)],[1,1]);
            else
                branch_metric = euclidian_dist([Signal(2*time-1),Signal(2*time)],[-1.-1]);
            end
    end
end

%Path metric function defined
%
function [y] = PaM(state, time)
%     global pred_state
%     global PM;
%     global BM;
    if time == 1
        if state == 1
            y = 0;
        else
            y = inf;
        end
              
    
    else
        
        if state == 1 || state == 2
            y = min(PM(1,time-1) + BM(1,state,time-1), PM(4,time-1) + BM(4,state,time-1));
            if y == PM(1,time-1) + BM(1,state,time-1)
                pred_state(state,time) = 1;
            else
                pred_state(state,time) = 4;
            end
        else
            y = min(PM(3,time-1) + BM(3,state,time-1), PM(2,time-1) + BM(2,state,time-1));
            if y == PM(3,time-1) + BM(3,state,time-1)
                pred_state(state,time) = 3;
            else
                pred_state(state,time) = 2;
            end
        end
        
    
     end
end

end


function [HD]=hamming_dist(A,B)  
    C = abs(A-B);
    HD = sum(C);
end

function[ED] = euclidian_dist(A,B)
    C = (A-B);
    C = C.^2;
    ED = sum(C);
end
